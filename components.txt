components:
LCD 1602A
LEDs (4waia)
Buzzer
H-Bridge L298
Resistance 4.7k (4waia)
Push Buttons
KeyBad 4x4
DC Motor
Arduino Uno
EEPROM 24C16
Lw 3aizeen testa5demo communication protocols yb2a hato 2 micro controller we esta5dmo (SPI).


L298 Motor Driver Module - 1
Character LCD 2x16 - Green - 1
Serial I2C LCD Daughter Board Module -1  
Red LED 5mm (6 leds green - red - yellow)
Carbon Resistor 220kΩ 0.25W Through Hole-10
Buzzer 5V - 1
Carbon Resistor 4.7kΩ 0.25W Through Hole-10
Mini Push Button 2 Pin 6x6x5.5mm- 2
KeyPad 4x4
DC Geared Motor
18650 Li-ion Battery 3.7V Rechargeable (Recycled)-2
18650 Battery Case Holder 2 cells
Breadboard 400 points
(#include <LiquidCrystal_I2C.h>

#include <Wire.h>


// Set the LCD address and dimensions
const byte LCD_ADDRESS = 0x27;  // Change this to your LCD address
const byte LCD_COLS = 16;
const byte LCD_ROWS = 2;

// Create an instance of the LCD class
LiquidCrystal_I2C lcd(LCD_ADDRESS, LCD_COLS, LCD_ROWS);

// Other pin assignments and variables
const int motorEnablePin = 9;  // L298 Motor Driver enable pin
const int motorIn1Pin = 8;    // L298 Motor Driver input 1 pin
const int motorIn2Pin = 7;    // L298 Motor Driver input 2 pin
const int ledPin = 13;        // LED pin
const int buttonPin = 2;      // Push button pin
const int buzzerPin = 3;      // Buzzer pin
const int keypadRows = 4;     // Number of keypad rows
const int keypadCols = 4;     // Number of keypad columns
const byte keypadRowPins[keypadRows] = {A0, A1, A2, A3};  // Keypad row pins
const byte keypadColPins[keypadCols] = {A4, A5, A6, A7};  // Keypad column pins
bool doorLocked = true;       // Door lock status
char keypadKey;               // Pressed keypad key
String password = "1234";     // Set the password here

// ADC variables
const int analogPin = A0;   // Analog input pin
int sensorValue = 0;        // ADC sensor value
int sensorVoltage = 0;      // ADC sensor voltage

// Timer variables
unsigned long previousMillis = 0;    // Previous time
const long interval = 1000;          // Interval in milliseconds

void setup() {
  Wire.begin(); // Initialize I2C communication

  // Initialize LCD module
  lcd.begin(LCD_COLS, LCD_ROWS);
  lcd.print("Hello, LCD!");

  // Set pin modes
  pinMode(motorEnablePin, OUTPUT);
  pinMode(motorIn1Pin, OUTPUT);
  pinMode(motorIn2Pin, OUTPUT);
  pinMode(ledPin, OUTPUT);
  pinMode(buttonPin, INPUT_PULLUP);
  pinMode(buzzerPin, OUTPUT);

  // Attach interrupt to button pin
  attachInterrupt(digitalPinToInterrupt(buttonPin), buttonInterrupt, FALLING);

  // Set up ADC
  analogReference(DEFAULT);
  ADCSRA |= (1 << ADEN);  // Enable ADC
  ADCSRA |= (1 << ADIE);  // Enable ADC Interrupt
  ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);  // Set ADC prescaler to 128

  // Set up Timer1 for ADC triggering
  TCCR1A = 0;              // Clear Timer1 control register A
  TCCR1B = (1 << WGM12);   // Set Timer1 to CTC mode
  OCR1A = 31249;           // Set compare value for 1 second interrupt (16MHz / (128 * 1) - 1)
  TIMSK1 |= (1 << OCIE1A); // Enable Timer1 compare interrupt

  // Enable interrupts
  sei();
}

void loop() {
  // Check keypad input
  keypadKey = keypadGetKey();
  if (keypadKey != '\0') {
    // Handle keypad input
    if (keypadKey == '#') {
      // Check if entered password is correct
      if (checkPassword()) {
        unlockDoor();
      } else {
        incorrectPassword();
      }
    }

    // Reset keypad key
    keypadKey = '\0';
  }

  // Perform other tasks in the loop
  // ...

  // Read sensor value and voltage during ADC interrupt

  // Toggle LED every second
  if (millis() - previousMillis >= interval) {
    previousMillis = millis();
    digitalWrite(ledPin, !digitalRead(ledPin));
  }
}

void buttonInterrupt() {
  // Button interrupt handler
  if (doorLocked) {
    unlockDoor();
  }
}

ISR(ADC_vect) {
  // ADC interrupt handler
  sensorValue = ADC;
  sensorVoltage = map(sensorValue, 0, 1023, 0, 5000);
  lcd.setCursor(0, 0);
  lcd.print("Sensor: ");
  lcd.print(sensorValue);
  lcd.setCursor(0, 1);
  lcd.print("Voltage: ");
  lcd.print(sensorVoltage / 1000.0);
  lcd.print("V");
}

ISR(TIMER1_COMPA_vect) {
  // Timer1 interrupt handler
  ADCSRA |= (1 << ADSC);  // Start ADC conversion
}

char keypadGetKey() {
  // Keypad scanning code
  const char keypadKeys[keypadRows][keypadCols] = {
    {'1', '2', '3', 'A'},
    {'4', '5', '6', 'B'},
    {'7', '8', '9', 'C'},
    {'*', '0', '#', 'D'}
  };

  byte row, col;
  char key = '\0';

  // Set all rows as HIGH initially
  for (byte r = 0; r < keypadRows; r++) {
    digitalWrite(keypadRowPins[r], HIGH);
  }

  // Scan each column
  for (byte c = 0; c < keypadCols; c++) {
    // Set current column as LOW
    pinMode(keypadColPins[c], OUTPUT);
    digitalWrite(keypadColPins[c], LOW);

    // Check each row for a pressed key
    for (byte r = 0; r < keypadRows; r++) {
      if (digitalRead(keypadRowPins[r]) == LOW) {
        row = r;
        col = c;
        break;
      }
    }

    // Reset current column as INPUT
    pinMode(keypadColPins[c], INPUT);
  }

  // Determine the pressed key
  if (row != 255 && col != 255) {
    key = keypadKeys[row][col];
  }

  delay(10);  // Small delay for debouncing

  return key;
}

bool checkPassword() {
  // Password checking code
  String enteredPassword = "";
  char key;

  lcd.clear();
  lcd.print("Enter Password:");

  while (enteredPassword.length() < password.length()) {
    key = keypadGetKey();
    if (key != '\0' && key != '#') {
      enteredPassword += key;
      lcd.setCursor(0, 1);
      lcd.print(enteredPassword);
      delay(200);
    }
  }

  delay(500);

  if (enteredPassword == password) {
    return true;
  } else {
    return false;
  }
}

void unlockDoor() {
  // Code to unlock the door
  doorLocked = false;
  lcd.clear();
  lcd.print("Door Unlocked!");
  digitalWrite(motorEnablePin, HIGH);
  digitalWrite(motorIn1Pin, HIGH);
  digitalWrite(motorIn2Pin, LOW);
  delay(2000);
  digitalWrite(motorEnablePin, LOW);
  lcd.clear();
}

void incorrectPassword() {
  // Code for incorrect password attempt
  lcd.clear();
  lcd.print("Incorrect Password");
  digitalWrite(buzzerPin, HIGH);
  delay(1000);
  digitalWrite(buzzerPin, LOW);
  lcd.clear();
}
)